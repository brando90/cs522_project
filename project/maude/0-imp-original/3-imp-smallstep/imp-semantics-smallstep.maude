mod IMP-CONFIGURATIONS-SMALLSTEP is including IMP-SYNTAX + STATE .
  sorts Configuration ExtendedConfiguration .
  subsort Configuration < ExtendedConfiguration .
  op <_,_> : AExp State -> Configuration .
  op <_,_> : BExp State -> Configuration .
  op <_,_> : Stmt State -> Configuration .
  op <_> : Pgm -> Configuration .
  op o_ : Configuration -> ExtendedConfiguration [prec 80] .   --- one step
  op *_ : Configuration -> ExtendedConfiguration [prec 80] .   --- all steps

  op errorAr : -> AExp .
  op errorBool : -> BExp .
  op errorStmt : -> Stmt .

  var Cfg Cfg' : Configuration .
  var Sigma : State .
  var A A' A1 A1' A2 A2' : AExp .  var B B' B1 B1' B2 : BExp .  var S S' S1 S1' S2 : Stmt .
  var P : Pgm .
 --- crl * Cfg => * Cfg' if o Cfg => Cfg' .
 --- in words, recurse only if your not in an error already (i.e. State != .State OR A != Error)
 crl * Cfg => * Cfg' if o Cfg => Cfg' /\ Cfg => < A, Sigma > /\ A =/=Bool errorAr .
 crl * Cfg => * Cfg' if o Cfg => Cfg' /\ Cfg => < A, Sigma > /\ Sigma =/=Bool .State .

 crl * Cfg => * Cfg' if o Cfg => Cfg' /\ Cfg => < B, Sigma > /\ B =/=Bool errorBool .
 crl * Cfg => * Cfg' if o Cfg => Cfg' /\ Cfg => < B, Sigma > /\ Sigma =/=Bool .State .

 crl * Cfg => * Cfg' if o Cfg => Cfg' /\ Cfg => < S, Sigma > /\ S =/=Bool errorStmt .
 crl * Cfg => * Cfg' if o Cfg => Cfg' /\ Cfg => < S, Sigma > /\ Sigma =/=Bool .State .

 --- TODO it would be nice to get this to work to make it cleaner?
 ---crl * Cfg => * Cfg' if o Cfg => Cfg' /\ Cfg => < S, Sigma > /\ Sigma =/=Bool .State .
 ---crl * Cfg => * Cfg' if o Cfg => Cfg' /\ Cfg ==Bool P .
endm

mod IMP-SEMANTICS-SMALLSTEP is including IMP-CONFIGURATIONS-SMALLSTEP .
  var X : Id .  var Sigma Sigma' : State .  var I I1 I2 : Int .  var Xl : List{Id} .
  var A A' A1 A1' A2 A2' : AExp .  var B B' B1 B1' B2 : BExp .  var S S' S1 S1' S2 : Stmt .

--- SmallStep-On-Errors
  crl o < errorAr, Sigma > => < errorAr, .State > if Sigma =/=Bool .State .
  crl o < errorAr, Sigma > => < errorAr, .State > if Sigma ==Bool .State .

  crl o < errorBool, Sigma > => < errorBool, .State > if Sigma =/=Bool .State .
  crl o < errorBool, Sigma > => < errorBool, .State > if Sigma ==Bool .State .

  crl o < errorStmt, Sigma > => < errorStmt, .State > if Sigma =/=Bool .State .
  crl o < errorStmt, Sigma > => < errorStmt, .State > if Sigma ==Bool .State .

--- SmallStep-Lookup
 crl o < X,Sigma > => < Sigma(X),Sigma > if Sigma(X) =/=Bool undefined .
 --- its ok to not have these bellow because my semantics doesn't allow to store errors since that should lead u to the error state
 --- crl o < X,Sigma > => < errorAr,Sigma > if Sigma(X) ==Bool errorAr .
 --- crl o < X,Sigma > => < errorBool,Sigma > if Sigma(X) ==Bool errorBool .
 --- crl o < X,Sigma > => < errorStmt,Sigma > if Sigma(X) ==Bool errorStmt .

--- SmallStep-ADD
 crl o < A1 + A2,Sigma > => < A1' + A2,Sigma > if o < A1,Sigma > => < A1',Sigma > /\ A1' =/=Bool errorAr .
 crl o < A1 + A2,Sigma > => < errorAr,Sigma > if o < A1,Sigma > => < A1',Sigma > /\ A1' ==Bool errorAr .

 crl o < A1 + A2,Sigma > => < A1 + A2',Sigma > if o < A2,Sigma > => < A2',Sigma > /\ A2' =/=Bool errorAr .
 crl o < A1 + A2,Sigma > => < errorAr,Sigma > if o < A2,Sigma > => < A2',Sigma > /\ A2' ==Bool errorAr .

  rl o < I1 + I2,Sigma > => < I1 +Int I2,Sigma > .

--- SmallStep-DIV
 crl o < A1 / A2,Sigma > => < A1' / A2,Sigma > if o < A1,Sigma > => < A1',Sigma > /\ A1' =/=Bool errorAr .
 crl o < A1 / A2,Sigma > => < errorAr,Sigma > if o < A1,Sigma > => < A1',Sigma > /\ A1' ==Bool errorAr .

 crl o < A1 / A2,Sigma > => < A1 / A2',Sigma > if o < A2,Sigma > => < A2',Sigma > /\ A2' =/=Bool errorAr .
 crl o < A1 / A2,Sigma > => < errorAr,Sigma > if o < A2,Sigma > => < A2',Sigma > /\ A2' ==Bool errorAr .

 --- actually I don't think we need this, because variables without values shouldn't exist
 --- crl o < A1 / A2,Sigma > => < errorAr,Sigma > if A2 ==Bool 0 . --- TODO do we need this?

 crl o < I1 / I2,Sigma > => < I1 /Int I2,Sigma > if I2 =/=Bool 0 .
 crl o < I1 / I2,Sigma > => < errorAr,Sigma > if I2 ==Bool 0 .

--- SmallStep-LEQ-ARG
 crl o < A1 <= A2,Sigma > => < A1' <= A2,Sigma > if o < A1,Sigma > => < A1',Sigma > /\ A1' =/=Bool errorAr .
 crl o < A1 <= A2,Sigma > => < errorBool, Sigma > if o < A1,Sigma > => < A1',Sigma > /\ A1' ==Bool errorAr .

 crl o < I1 <= A2,Sigma > => < I1 <= A2',Sigma > if o < A2,Sigma > => < A2',Sigma > /\ A2' =/=Bool errorAr .
 crl o < I1 <= A2,Sigma > => < errorBool, Sigma > if o < A2,Sigma > => < A2',Sigma > /\ A2' ==Bool errorAr .
 --- otherwise things like: rew * < x <= 2 / 0 , .State > . won't rewrite to errorBool, I understand why it would be weird cuz of small step since the first arg should already be evaluated...
 ---crl o < A1 <= A2,Sigma > => < A1 <= A2',Sigma > if o < A2,Sigma > => < A2',Sigma > /\ A2' =/=Bool errorAr .
 ---crl o < A1 <= A2,Sigma > => < errorBool, Sigma > if o < A2,Sigma > => < A2',Sigma > /\ A2' ==Bool errorAr .
  rl o < I1 <= I2,Sigma > => < I1 <=Int I2,Sigma > .

--- SmallStep-Not-Arg
 crl o < ! B,Sigma > => < ! B',Sigma > if o < B,Sigma > => < B',Sigma > /\ B' =/=Bool errorBool .
 crl o < ! B,Sigma > => < errorBool ,Sigma > if o < B,Sigma > => < B',Sigma > /\ B' ==Bool errorBool .

  rl o < ! true,Sigma > => < false,Sigma > .
  rl o < ! false,Sigma > => < true,Sigma > .

--- SmallStep-AND
 crl o < B1 && B2,Sigma > => < B1' && B2,Sigma > if o < B1,Sigma > => < B1',Sigma > /\ B1' =/=Bool errorBool .
 crl o < B1 && B2,Sigma > => < errorBool,Sigma > if o < B1,Sigma > => < B1',Sigma > /\ B1' ==Bool errorBool .
  rl o < false && B2,Sigma > => < false,Sigma > .
  rl o < true && B2,Sigma > => < B2,Sigma > .

--- SmallStep-block
  rl o < {S},Sigma > => < S,Sigma > .

--- SmallStep-Assign
 crl o < X = A ;,Sigma > => < X = A' ;,Sigma > if o < A,Sigma > => < A',Sigma > /\ A' =/=Bool errorAr .
 crl o < X = A ;,Sigma > => < errorStmt,Sigma > if o < A,Sigma > => < errorAr, Sigma > .
 crl o < X = A ;,Sigma > => < errorStmt,Sigma > if o < A,Sigma > => < errorAr, Sigma' > .
 ---crl o < X = A ;,Sigma > => < errorAr,Sigma > if  A ==Bool errorAr .
 ---crl o < X = I ;,Sigma > => < errorAr,Sigma > if o < I,Sigma > => < errorAr, Sigma > .
 crl o < X = I ;,Sigma > => < {},Sigma[I / X] > if Sigma(X) =/=Bool undefined .

--- SmallStep-SEQ
 crl o < S1 S2,Sigma > => < S1' S2,Sigma' > if o < S1,Sigma > => < S1',Sigma' > /\ S1' =/=Bool errorStmt .
 crl o < S1 S2,Sigma > => < errorStmt, Sigma' > if o < S1,Sigma > => < errorStmt,Sigma' > .
 crl o < S1 S2,Sigma > => < errorStmt, Sigma > if o < S1,Sigma > => < errorStmt,Sigma > .
  rl o < {} S2,Sigma > => < S2,Sigma > .

--- SmallStep-IF
 crl o < if (B) S1 else S2,Sigma > => < if (B') S1 else S2,Sigma > if o < B,Sigma > => < B',Sigma  > /\ B' =/=Bool errorBool .
 crl o < if (B) S1 else S2,Sigma > => < errorStmt, Sigma > if o < B,Sigma > => < B',Sigma > /\ B' ==Bool errorBool .
  rl o < if (true) S1 else S2,Sigma > => < S1,Sigma > .
  rl o < if (false) S1 else S2,Sigma > => < S2,Sigma > .

--- SmallStep-While
  rl o < while (B) S,Sigma > => < if (B) {S while (B) S} else {},Sigma > .

--- SmalStep-PGM
  rl o < int Xl ; S > => < S,(Xl |-> 0) > .
  --- rl o < int Xl ; S > => < S,(Xl |-> 0) > .
  --- really ugly but it works...
  rl * < int Xl ; S > => * < S,(Xl |-> 0) > .

endm
